# 꼭 알아둬야 할 자료구조 

## 스택 (Stack)
- 데이터를 제한적으로 접근할 수 있는 구조 
    - 한쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조 = 큐와 같음
- 가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는 데이터 구조 
    => **큐와 다른 부분**
    - 큐   :  FIFO 정책**
    - 스택 :  LIFO 정책**


### 1. 스택의 구조
- 스택은  LIFO 정책() 또는 FIFO 정책 데이터 관리 방식을 따름 
  - LIFO: 마지막에 넣은 데이터를 가장 먼저 추출하는 데이터 관리 정책
  - FILO: 처음에 넣은 데이터를 가장 마지막에 추출하는 데이터 관리 정책

- 대표적인 스택의 활용 
    - 컴퓨터 내부의 프로세스 구저의 함수 동작 방식 

- 주요기능 
    - push(): 데이터를 스택에 **넣기**
        - 아래에서부터 차례차례 
    - pop() : 데이터를 스택에서 **꺼내기**
        - 꺼낼때는 마지막에 넣은 데이터부터 꺼낸다. 

# Visualgo 사이트에서 시연해보며 이해하기 (push/pop 만 클릭해보며): 
#     https://visualgo.net/en/list


### 2. 스택의 구조와 프로세스 스택 
- 스택의 구조는 프로세스 실행구조의 가장 기본 
    - 함수 호출시 프로세스 실핼구조를 스택과 비교해서 이해 필요 


# 가볍게 이해를 돕기 위한 실습 
# 재귀함수 
# >> 리커시브라는 함수를 만드는데 
# -> 만약에 데이터가 0보다 작으면 
# -> 엔드를 출력하고 
# -> 그게 아니라면 데이터를 출력한다 
# -> 그리고 함수안에서 리커시브함수( 자기함수 )를 호출한다. 
# -> 가지고있는데이터에서 -1을 하고 출력
# -> 그리고 데이터를 출력 
def recursive(data) :
    if data < 0 :
        print("ended")
    else:
        print(data)
        recursive(data-1)
        print("returned", data)

# 재귀함수에서 자기함수를 출력해서 출력물이 많다. 
recursive(4)


```
### Process Stack    
 
 -1 |  recursive(-1) -out-> 1    
  0 |  recursive(0)  -out-> 2    
  1 |  recursive(1)  -out-> 3    
  2 |  recursive(2)  -out-> 4    
  3 |  recursive(3)  ...    
  4 |  recursive(4)  ...    
  
  
 **recursive(data-1)**
```

### 3. 자료구조 스택의 장단점
- 장점** 
    - 구조가 단순 => 구현하기 쉽다. 
    - 데이터 저장 /읽기 속도가 빠르다. 

- 단점(일반적인 스택구현시)
    - 데이터 최대 갯수를 미리 정해야한다. 
        - 파이썬의 경우 재귀 함수는 1000번까지만 호출이 가능 
    - 저장공간의 낭비가 발생할수 있음 
        - 미리 최대 갯수만큼 저장공간을 확보해야 함 
        
> 스택은 단순하고 빠른 성능을 위해 사용되므로, 
    보통 배열 구조를 활용해서 구현하는 것이 일반적. 
    위에서 열거한 단점이 있을 수 있음 

### 4. 파이썬 리스트 기능에서 제공하는 메서드로 스택 사용해보기
    - append(push), pop메서드 제공 
#     
data_stack = list()
data_stack.append(1)
data_stack.append(2)

data_stack


# 가장 마지막에 들어 간 데이터를 뽑아낸다.  
data_stack.pop()


### 5. 프로그래밍 연습 

#### 연습1 :  리스트 변수로 스택을 다루는 pop, push 기능을 구현해보기 (pop , push 함수 사용하지 않고 직접 구현해보기)

stack_list = list()

# 조건이 들어가니까 인자에 데이터를 넣고 
def push(data) : 
    stack_list.append(data) # 맨 앞에서부터 데이터가 들어간다.  
    pass 

# pop 굳이 필요없기때문에 인자에 값을 넣지 않는다. 
def pop() : 
    data = stack_list[-1] # 맨끝을 가지고 와야해서 -1 
    del stack_list[-1]   # 꺼낸 데이터는 없애야 해서 del 을이용해 삭제 
    return data          # 데이터 값을 리턴한다. 


# 데이터 확인   
for index in range(10):
    push(index)

# 그대로 마지막에 들어간 값인 9가 출력 
pop()
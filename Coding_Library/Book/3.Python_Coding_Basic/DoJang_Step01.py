"""
컴퓨테이셔널 씽킹과 알고리즘의 차이점은 무엇인가요?

**컴퓨테이셔널 씽킹은 4가지**
분해: 복잡한 문제를 작은 문제로 나눔
패턴 인식: 문제 안에서 유사성을 발견
추상화: 문제의 핵심에만 집중, 부차적인 것은 제외
알고리즘: 이렇게 정의한 문제를 해결하는 절차(일반화와 모델링은 여기에 포함)

현실에서 컴퓨터로 해결하려는 문제는 정형화된 문제가 아니라 비정형화된 문제가 더 많다.
비정형화된 문제를 컴퓨터로 해결하는 과정 
=> 문제를 이해하고 분해, 패턴 인식, 추상화, 알고리즘 작성까지를 컴퓨테이셔널 씽킹

"""


# DoJang_Step01.py
# 문제는 => Question_01.py 이동
print('-'*40)

txt = """
기본 문법 알아보기

0. 항상 먼저 자료형 확인 
1. 사칙연산 => ' 더하기( + ), 빼기 ( - ), 곱하기( \* ), 나누기( / )'    
2. **나눗셈 후 소수점이하르 버리는 '//'연산자 **   
    =>'//' 는 버리는 나눗셈 => 소숫점 이하는 버림. 실수에 '//' 사용하면 '.0' 이 됨       
3. 나눗셈 후 나머지를 구하는 %연산자 =>나누어 떨어지지 않을 때 나머지만 구함.     
4. 거듭 제곱 연산자 => 2**10 >>> 1024     
5. 값을 정수 => int()     
6. 객체형의 자료형 알아내기 => type(값)     
7. 실수와 정수 계산 => 실수로 계산이됨 
8. 값을 실수로 만들 때 float()안에 넣으면 됨 

"""
print(txt)
print('-'*40)

#'hello,world!' 출력
print('hello,world!')

# 세미클론 => 한줄에 여러 문장일 때 
print('Hello');print('world')

# 파이썬은 숫자도 객체이다, 객체는 클래스로 표현한다 
int(3.3) # 실수 3.3을 int 클래스로 된 객체로 만든다는 뜻 

# 몫과 나머지를 함께 구하려면 
divmod(5,2)
print('-'*40)

txt = """
- 변수와 입력 사용하기 
x = 10 
x 라는 박스에 10을 담는다 
변수이름 = 값 

- 변수 생성 규칙 
1. 영문 문자와 숫자르 사용할수 있다. 
2. 대소문자를 구분한다. 
3. 문자부터 시작해야하며 숫자부터 시작하면 안된다. 
4. \_(밑줄문자: 언더 스코어) 시작 가능하다 
5. 특수문자(+,-,\*,\/,$,@,&,%등)는 사용할수 없다
6. 파이썬 키워드(if , for , while, and , or) 등은 사용할수 없다. 

- 프로그래밍언어에서 '='은 변수에 값을 할당한다라는 의미 
    => 수학등호 같은 연산자는 '=='     

"""
print(txt)
print('-'*40)

# 변수 여러개를 한번에 
# 변수 이름 1 , 변수 이름 2 , 변수 이름 3 = 값1 ,값 2, 값3 
x, y, z = 10, 20, 30 
print( x, y, z )
x = y = z = 10 
print(x)

x, y = 10, 20
x, y = y, x
print( x, y )

print('-'*40)

# 빈 변수 만들기 
x = None 
print(x)
print('-'*40)
# 값이 없어서 아무것도 출력이 안됨 
print(x)
print('-'*40)

# 변수로 계산하기 
a = 10 
b = 10 
c =a+b 
print(c)

# 산술 연산후 할당 연산자 사용하기 
a = 10 
print(a+20 , a)

a = 10 
a += 20 
print(a)

print('-'*40)

txt = """
- input() 함수 사용 
변수 = input('문자열')    
입력 값을 정수로 변환하기     
변수 = int(input('첫번째 숫자를 입력하세요: '))    
변수 = int(input())    

- 입력 받은 값을 두개의 변수에 저장하기    
변수 1, 변수 2 = input().split()     
변수 1, 변수 2 = input().split('문자열')    
변수 1,변수 2 = input('문자열').split()      
변수 1,변수 2 = input('문자열').split('기준문자열')    

input에 split을 사용하면 입력받은 값을 공백을 기준으로      
분리하여 변수에 차례로 저장  
  
- map()을 사용하여 정수로 변환하기 
split의 결과를 매번 int로 변경하면 번거롭다-> 이때 map()을 사용         
map에 input().split()을 넣으면 split의 결과르 모두 int()로 변환      
나중에 map에서 다시 설명        

"""
print(txt)
print('-'*40)
print('input 파트 => 주석처리')
# map() 공백을 기준으로 분리 
#a,b = map(int, input('숫자 두개를 입력하세요(,제외): ').split())
#print(a+b)

# 입력 받은 값을 콤마 기준으로 분리하기 
#a,b = map(int, input('숫자 두 개를 입력하세요: ').split(','))
#print(a + b)
print('-'*40)

# sep로 값 사이에 문자 넣기 (공백 ,콤마, 줄바꿈 ,문자 다 ok )
# sep는 구분자라는 의미 
print(100,250, sep = 'x')
print('1\n2\n3')
print('-'*40)

txt = """
- 제어 문자 
    \n : 다음줄로 이동 하며 개행이라고 부름  
    \t : 탭문자, 키보드의  탭과 같음 
    \\ : \를 사용하려면 두번 !!      
"""

print(txt)
print('-'*40)

# 프린트의 다양한 사용 방법 
#print(vla , sep , end)

x = 10 
#del x 
tx = """
NameError 발생
Traceback (most recent call last)
 in ()
      1 x = 10
      2 del x
----> 3 print(x)

NameError: name 'x' is not defined
"""
print(tx)
#print(x)

print('-'*40)

tx = """
# Q&A 
-    변수에 값이 어떻게 저장되나요? 
    - 파이썬은 값 자체도 객체 
        => 그래서 변수에 값을 그대로 저장하지 않고 객체를 가르키는 방식을 사용
        => 예를 들어 다음과 같이 x, y에 1000을 할당 했다면 x, y는 단지 1000이라는 객체를 가르킴 
- 행렬 곱셈 연산자는 numpy모듈설치후 사용 
- $ pip install numpy 
"""
print(tx)

print('-'*40)


# import sys
# print(sys.getrefcount(1000)) 
# # 2: 윈도우에서 처음 레퍼런스 카운트는 2
# # 3: 리눅스에서 처음 레퍼런스 카운트는 3
# x = 1000 
# # x에 1000을 저장
# print(sys.getrefcount(1000))    
# # 3: 1000을 한 번 사용하여 레퍼런스 카운트 1 증가(Windows)
# # 4: 리눅스
# y = 1000  
# # y에 1000을 저장
# print(sys.getrefcount(1000))   
# # 4: 1000을 한 번 사용하여 레퍼런스 카운트 1 증가(Windows)
# # 5: 리눅스
# print(x is y)    
# # True: x와 y가 같은 객체를 가리키고 있으므로 True가 나옴

tx = """
# 불과 비교 연산자, 논리 연산자 알아보기 

- Programming을 하다 보면 참과 거짓을 판단해야 할 때가 많음
- Boolean = > 참(True)과 거짓(False)을 나타냄
- 두 값의 관계를 판단하는 **비교 연산자**와 두 값의 논리값을 판단하는 **논리 연산자** 

++ 비교 연산자와 논리 연산자의 판단의 결과 => 참(True)과 거짓(False)     
- 숫자가 같은지 다른지 비교 , 문자열도 마찬가지      
    => 두숫자의 값을 비교 하려면 ==(equal)     
    => 다른지를 비교하려면 !=( not equal)을 사용      
    
++ 객체가 같은지 다른지 비교 => is, is not => **객체를 비교**     
++ 정수 객체와 실수 객체가 다른것을 확인하려면 id()함수를 사용     
- 주로 is, is not은 클래스로 객체를 만든뒤 객체가 서로 같은지 비교 할때 사용      
    - Point는 ==,!= 는 is, is not 과 같은 느낌이나 **동작 방식이 다르다**는 것이 KeyPoint!
    
    
### 논리 연산자 사용하기 
    -> 논리 연산자 (AND, OR , NOT) => 세 연산자가 한식에 들어 있으면 NOT > AND > OR 
AND : A AND B => 두 값이 모두 True => True     
OR  : A  OR B =>두 값 중 하나라도 True => True 이말은 두값이 모드 False => False    
NOT : A NOT B => NOT은 논리 값을 뒤집는다 => 이말인 즉, (NOT True => False , NOT False = True)  
"""
print(tx)
print('-'*40)

# 숫자 
print(10 == 10 , 10 != 10)
# 문자열 
print('python' == 'Python' , 'python' != 'Python')
# 부등호 
print(10 > 20 , 10 < 20 , 10>=10 ,10 <= 10)

# 부등호 잘 헷갈림 ** 주의 **
# 크거나 같은지 , 작거나 같은지 
print(11 >= 10 , 11 <= 10)

# 객체가 같은지 다른지 비교 -> is , is not 
print(1==1.0, 1 is 10 , 1 is not 1.0)

print('-'*40)

txt ="""
# 리스트와 튜플 사용하기 

- 리스트 
    - 리스트 = [값1, 값2 ,값3,.... ]      
    
        -  리스트에 여러 자료형 저장할수 있다.
        - 빈 리스트 => 리스트 = [] , 리스트 = list() 생성 가능 
            - 빈리스트는 쓸모는 없어 보이지만 보통 빈리스트를 만들어 값을 추가하는 방식으로 사용 
        - range 를 사용하여 리스트 만들기 
            - range는 연속된 숫자를 생성 
                => 리스트 = list(range(횟수))       
                => 리스트 = list(range(시작 , 끝))  -> 시작과 끝인데(시작 , 끝-1)     
                => 리스트 = list(range(시작 , 끝, 증가폭)) -> 해당 값을 증가하면서 숫자를 생성     
            
            
- 튜플 
    - 튜플 = (값1, 값2 ,값3,....)
    
    - 튜플 = 값1, 값2 ,값3,....     
        => 괄호로 묶지 않아도 값만 콤마로 구분해도 튜플     
        - 리스트처럼 값을 일렬로 저장 => 안에 저장된 요소를 변경, 추가, 삭제를 할 수 없다.      
            => 쉽게 말해 **읽기 전용 리스트** 
        - 리스트처럼 여러 자료형 저장할수 있다.
        - **보통 튜플은 요소가 변경되지 않고 유디 되어야 할 때 사용됨**
        - 잦은 요소 변경은 리스트로 사용!!
        - 요소가 하나만 든 튜플은     
            => 튜플 = (값,), 튜플 = 값,    
"""
print(txt)
print('-'*40)

# 리스트 패킹 
a = list(range(1,10))
print(a)

# 시작과 끝인데(시작 , 끝-1 )
b = list(range(5,12)) 
print(b)
print('-'*40)

# 증가 폭을 사용하는 방법 
#=> range()증가 폭을 지정하면 해당 값을 증가하면서 숫자를 생성 
c = list(range(-4,10,2))
print(c)

# 10부터 1씩 감소하며 0은 포함 되지 않는다 그래서 1까지 생성된다. 
d = list(range(10, 0, -1))
print(d)
print('-'*40)

# 튜플 패킹
a = 1,2,3,4,5 
print(a)
b = (1, 2, 3, 4, 5)
print(b)


# 요소가 하나만 든 튜플은 => 튜플 = (값,), 튜플 = 값,  
# 값이 한개인 튜플이 필요한 이유 
# => 함수를 사용하다 보면 값이 아닌 튜플을 넣어야 하는 경우가 발생 
# => 이때 값은 한개지만 튜플을 넣을때 (값,)과 같은 형식으로 사용  

# range를 이용해 튜플 생성하기
a = tuple(range(10))
print(a)


b = tuple(range(10))       
c = tuple(range(1 , 10))     #-> 시작과 끝인데(시작 , 끝-1)     
d = tuple(range(10 , 0, -1)) #-> 해당 값을 증가하면서 숫자를 생성 
print(b,c,d)
print('-'*40)

# 튜플을 리스트로 만들고 리스트를 튜플로 만들기 -1
a = [1,2,3,4]
tuple(a)

# 튜플을 리스트로 만들고 리스트를 튜플로 만들기 -2
b = (5,6,7,8)
list(b)

# 리스트와 튜플안에 문자열을 넣으면 => 문자 리스트, 문자 튜플이 생성 
list('hello'),tuple('hello')
# 문자열 'hello'가 문자 하나하나가 리스트의 요소로 들어가서 문해된 형태로 출력이 된다.

# 리스트와 튜플로 변수만들기 
a,b,c = [1,2,3]
print(a,b,c)
d,e,f = (5,6,7)
print(d,e,f)

# 리스트와 튜플 변수로 변수여러개를 만들 수 있음 
# 다음과 같이 리스트와 변수 여러개에 할당하는 것을 리스트 언패킹(list unpacking), 튜플언페킹이라고 함(tuple unpacking)

x = [1,2,3]
a,b,c = x
print(a,b,c)

print('='*5)

y = (5,6,7)
d,e,f = y
print(d,e,f)

print('-'*40)

txt = """
# 시퀸즈 자료형 활용하기 
- 리스트 , 튜플 , range, 문자열 => 연속성(sequence)을 가짐 
- 시퀸즈 자료형 => ( 리스트 , 튜플 , range, 문자열)
- 시퀸즈 자료형의 공통기능 사용 
    - 시퀸스 자료형의 큰 특징을 공통동작과 기능을 제공 
    - 시퀸즈 자료형으로 만든 객체를 시퀴즈 객체라고 함 => 각 값을 요소라고 칭 함 
    - 특정 값을 확인 
        => 값 in 시퀸즈 객체
        => 값 not in 시퀸즈 객체
        => 값 in range(값)
    - 시퀸즈 객채 연결하기 
        - 시퀸즈 객체 1 + 시퀸즈 객체 2  
        - **range는 + , \* 연산자로 객체를 연결 할 수 없다.** 
            - 근데!  리스트, 튜플로 묶어서 연결하면 가능 => 아래 예시 참조
     - 시퀸즈 객체 반복 
         - 시퀸즈 객체 * 정수
         - 정수 * 시퀸즈 객체 
     - 시퀸즈 요소 개수 구하기 
         - len(시퀸즈 객체)
             -> 리스트, 튜플, 문자열도 마찬가지로 길이를 구할 수 있다. 
             - range의 숫자 생성 개수 구하기 =>len(range( 값 ))
"""
print(txt)

# 시퀸즈 객채 연결하기 -> 시퀸즈 객체 1 + 시퀸즈 객체 2  
a  = [1,2,3]
b  = [6,7,8]
print(a + b)

# 이렇게
a = list(range(0,5))+list(range(6,12))
print(a)
# 시퀸즈 객체 반복 
b = [1,2,3] *5
print(b)

# 시퀸즈 요소 개수 구하기  -> 리스트 튜플도 구해짐 
a  = [1,2,3]
print(len(a))

# range의 숫자 생성 개수 구하기 
a = len(range(0,10,2))
print(a)
print('-'*40)

# 130 pages
# 174 page step01 끝 